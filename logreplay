#!/usr/bin/perl
use strict;
use warnings;

use Time::HiRes qw(gettimeofday tv_interval usleep);
use Parse::AccessLogEntry;
use LWP::UserAgent;
use Getopt::Long;
use JSON;
use Statistics::Descriptive;

$|=1;

my ($server,$host_header);
my $port = 80;

GetOptions(
    's|server=s' => \$server,
    'h|host=s' => \$host_header,
    'p|port=s' => \$port,
) or die $!;

die unless $server;

my @times;
my $parser = Parse::AccessLogEntry->new();
my $ua = LWP::UserAgent->new(agent=>'logreplay');
my @spinner = qw( - / | \ );
my @errors = ();
my @urls;

while (<>) {
    # Setup
    my $request = $parser->parse($_); 
    next unless $request->{rtype} eq 'GET';
    next unless $request->{code} < 400;
    next if $request->{agent} =~ /logreplay/;
    push @urls, "http://$server:$port" . $request->{file};
}

print scalar @urls, " URLs to play back.\n";
print "Hitting $server: $spinner[0]";
my $i=0;
for my $url (@urls) {
    # Do something
    print "\b", $spinner[$i++ % scalar @spinner];
    my $begin = [gettimeofday];
    my $req = HTTP::Request->new(GET => $url);
    $req->header('Host', $host_header) if $host_header;
    my $res = $ua->request($req);
    if ($res->is_success) {
        push @times, sprintf("%f", tv_interval($begin));
    } else {
        push @errors, $res->status_line . " for $url";
    }
}
print "\bDone.\n";

if (@errors) {
    print "There were ", scalar @errors . " errors:\n";
    print STDERR "$_\n" for @errors;
}

my $stat = Statistics::Descriptive::Full->new();
$stat->add_data(@times);

open REPORT, '>report.json';
print REPORT 'var report = ' . objToJson {
    set => \@times,
    min => $stat->min,
    max => $stat->max,
    total => $stat->count,
    average => $stat->mean,
    median => $stat->median,
    percentile_25 => $stat->percentile(25),
    percentile_75 => $stat->percentile(75),
    title => "Performance of " . scalar(@times) . " hits against $server",
    host => $host_header,
}, {pretty => 1, indent => 2};
close REPORT;

